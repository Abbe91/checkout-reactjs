{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport warning from \"rc-util/es/warning\";\nimport { toArray } from './valueUtil';\n\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n      treeCheckStrictly = props.treeCheckStrictly,\n      treeCheckable = props.treeCheckable,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      multiple = props.multiple;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed.');\n\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(function (val) {\n      return val && _typeof(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\n\nexport default warningProps;","map":{"version":3,"sources":["C:/Users/wODe/Desktop/School WIE19/Reactkurs/Checkout/checkout-reactjs/node_modules/rc-tree-select/es/utils/warningPropsUtil.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","warning","toArray","warningProps","props","searchPlaceholder","treeCheckStrictly","treeCheckable","labelInValue","value","multiple","every","val","Array","isArray"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,OAAOK,OAAP,MAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAIC,iBAAiB,GAAGD,KAAK,CAACC,iBAA9B;AAAA,MACIC,iBAAiB,GAAGF,KAAK,CAACE,iBAD9B;AAAA,MAEIC,aAAa,GAAGH,KAAK,CAACG,aAF1B;AAAA,MAGIC,YAAY,GAAGJ,KAAK,CAACI,YAHzB;AAAA,MAIIC,KAAK,GAAGL,KAAK,CAACK,KAJlB;AAAA,MAKIC,QAAQ,GAAGN,KAAK,CAACM,QALrB;AAMAT,EAAAA,OAAO,CAAC,CAACI,iBAAF,EAAqB,uCAArB,CAAP;;AAEA,MAAIC,iBAAiB,IAAIE,YAAY,KAAK,KAA1C,EAAiD;AAC/CP,IAAAA,OAAO,CAAC,KAAD,EAAQ,8DAAR,CAAP;AACD;;AAED,MAAIO,YAAY,IAAIF,iBAApB,EAAuC;AACrCL,IAAAA,OAAO,CAACC,OAAO,CAACO,KAAD,CAAP,CAAeE,KAAf,CAAqB,UAAUC,GAAV,EAAe;AAC1C,aAAOA,GAAG,IAAIjB,OAAO,CAACiB,GAAD,CAAP,KAAiB,QAAxB,IAAoC,WAAWA,GAAtD;AACD,KAFO,CAAD,EAEH,iKAFG,CAAP;AAGD;;AAED,MAAIN,iBAAiB,IAAII,QAArB,IAAiCH,aAArC,EAAoD;AAClDN,IAAAA,OAAO,CAAC,CAACQ,KAAD,IAAUI,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAX,EAAiC,wEAAjC,CAAP;AACD,GAFD,MAEO;AACLR,IAAAA,OAAO,CAAC,CAACY,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAF,EAAwB,+DAAxB,CAAP;AACD;AACF;;AAED,eAAeN,YAAf","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nimport warning from \"rc-util/es/warning\";\r\nimport { toArray } from './valueUtil';\r\n\r\nfunction warningProps(props) {\r\n  var searchPlaceholder = props.searchPlaceholder,\r\n      treeCheckStrictly = props.treeCheckStrictly,\r\n      treeCheckable = props.treeCheckable,\r\n      labelInValue = props.labelInValue,\r\n      value = props.value,\r\n      multiple = props.multiple;\r\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed.');\r\n\r\n  if (treeCheckStrictly && labelInValue === false) {\r\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\r\n  }\r\n\r\n  if (labelInValue || treeCheckStrictly) {\r\n    warning(toArray(value).every(function (val) {\r\n      return val && _typeof(val) === 'object' && 'value' in val;\r\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\r\n  }\r\n\r\n  if (treeCheckStrictly || multiple || treeCheckable) {\r\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\r\n  } else {\r\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\r\n  }\r\n}\r\n\r\nexport default warningProps;"]},"metadata":{},"sourceType":"module"}