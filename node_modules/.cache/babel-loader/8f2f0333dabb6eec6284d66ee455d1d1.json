{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, [\"children\"]);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread(_objectSpread({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback) {\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: node.key !== null ? node.key : pos,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"sources":["C:/Users/wODe/Desktop/School WIE19/Reactkurs/Checkout/checkout-reactjs/node_modules/rc-tree/es/utils/treeUtil.js"],"names":["_toConsumableArray","_defineProperty","_objectWithoutProperties","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","toArray","warning","getPosition","isTreeNode","getKey","pos","undefined","warningWithoutKey","treeData","Map","dig","list","path","treeNode","children","concat","recordKey","String","has","set","convertTreeToData","rootNodes","node","treeNodes","map","_treeNode$props","props","rest","dataNode","parsedChildren","flattenTreeData","treeNodeList","expandedKeys","expandedKeySet","Set","flattenList","parent","index","mergedKey","flattenNode","data","isStart","isEnd","traverseDataNodes","dataNodes","callback","processNode","parentPos","level","subNode","subIndex","convertDataToEntities","_ref","initWrapper","processEntity","onProcessFinished","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref2","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","get"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, [\"children\"]);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread(_objectSpread({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback) {\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: node.key !== null ? node.key : pos,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}"]},"metadata":{},"sourceType":"module"}