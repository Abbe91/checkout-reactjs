{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { addGlobalMouseDownEvent } from '../utils/uiUtil';\nexport default function usePickerInput(_ref) {\n  var open = _ref.open,\n      isClickOutside = _ref.isClickOutside,\n      triggerOpen = _ref.triggerOpen,\n      forwardKeyDown = _ref.forwardKeyDown,\n      blurToCancel = _ref.blurToCancel,\n      onSubmit = _ref.onSubmit,\n      onCancel = _ref.onCancel,\n      _onFocus = _ref.onFocus,\n      _onBlur = _ref.onBlur;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      typing = _React$useState2[0],\n      setTyping = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      focused = _React$useState4[0],\n      setFocused = _React$useState4[1];\n  /**\n   * We will prevent blur to handle open event when user click outside,\n   * since this will repeat trigger `onOpenChange` event.\n   */\n\n\n  var preventBlurRef = React.useRef(false);\n  var inputProps = {\n    onMouseDown: function onMouseDown() {\n      setTyping(true);\n      triggerOpen(true);\n    },\n    onKeyDown: function onKeyDown(e) {\n      switch (e.which) {\n        case KeyCode.ENTER:\n          {\n            if (!open) {\n              triggerOpen(true);\n            } else if (onSubmit() !== false) {\n              setTyping(true);\n            }\n\n            e.preventDefault();\n            return;\n          }\n\n        case KeyCode.TAB:\n          {\n            if (typing && open && !e.shiftKey) {\n              setTyping(false);\n              e.preventDefault();\n            } else if (!typing && open) {\n              if (!forwardKeyDown(e) && e.shiftKey) {\n                setTyping(true);\n                e.preventDefault();\n              }\n            }\n\n            return;\n          }\n\n        case KeyCode.ESC:\n          {\n            setTyping(true);\n            onCancel();\n            return;\n          }\n      }\n\n      if (!open && ![KeyCode.SHIFT].includes(e.which)) {\n        triggerOpen(true);\n      } else if (!typing) {\n        // Let popup panel handle keyboard\n        forwardKeyDown(e);\n      }\n    },\n    onFocus: function onFocus(e) {\n      setTyping(true);\n      setFocused(true);\n\n      if (_onFocus) {\n        _onFocus(e);\n      }\n    },\n    onBlur: function onBlur(e) {\n      if (preventBlurRef.current || !isClickOutside(document.activeElement)) {\n        preventBlurRef.current = false;\n        return;\n      }\n\n      if (blurToCancel) {\n        setTimeout(function () {\n          if (isClickOutside(document.activeElement)) {\n            onCancel();\n          }\n        }, 0);\n      } else {\n        triggerOpen(false);\n      }\n\n      setFocused(false);\n\n      if (_onBlur) {\n        _onBlur(e);\n      }\n    }\n  }; // Global click handler\n\n  React.useEffect(function () {\n    return addGlobalMouseDownEvent(function (_ref2) {\n      var target = _ref2.target;\n\n      if (open) {\n        if (!isClickOutside(target)) {\n          preventBlurRef.current = true; // Always set back in case `onBlur` prevented by user\n\n          window.setTimeout(function () {\n            preventBlurRef.current = false;\n          }, 0);\n        } else if (!focused) {\n          triggerOpen(false);\n        }\n      }\n    });\n  });\n  return [inputProps, {\n    focused: focused,\n    typing: typing\n  }];\n}","map":{"version":3,"sources":["C:/Users/wODe/Desktop/School WIE19/Reactkurs/Checkout/checkout-reactjs/node_modules/rc-picker/es/hooks/usePickerInput.js"],"names":["_slicedToArray","React","KeyCode","addGlobalMouseDownEvent","usePickerInput","_ref","open","isClickOutside","triggerOpen","forwardKeyDown","blurToCancel","onSubmit","onCancel","_onFocus","onFocus","_onBlur","onBlur","_React$useState","useState","_React$useState2","typing","setTyping","_React$useState3","_React$useState4","focused","setFocused","preventBlurRef","useRef","inputProps","onMouseDown","onKeyDown","e","which","ENTER","preventDefault","TAB","shiftKey","ESC","SHIFT","includes","current","document","activeElement","setTimeout","useEffect","_ref2","target","window"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { addGlobalMouseDownEvent } from '../utils/uiUtil';\nexport default function usePickerInput(_ref) {\n  var open = _ref.open,\n      isClickOutside = _ref.isClickOutside,\n      triggerOpen = _ref.triggerOpen,\n      forwardKeyDown = _ref.forwardKeyDown,\n      blurToCancel = _ref.blurToCancel,\n      onSubmit = _ref.onSubmit,\n      onCancel = _ref.onCancel,\n      _onFocus = _ref.onFocus,\n      _onBlur = _ref.onBlur;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      typing = _React$useState2[0],\n      setTyping = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      focused = _React$useState4[0],\n      setFocused = _React$useState4[1];\n  /**\n   * We will prevent blur to handle open event when user click outside,\n   * since this will repeat trigger `onOpenChange` event.\n   */\n\n\n  var preventBlurRef = React.useRef(false);\n  var inputProps = {\n    onMouseDown: function onMouseDown() {\n      setTyping(true);\n      triggerOpen(true);\n    },\n    onKeyDown: function onKeyDown(e) {\n      switch (e.which) {\n        case KeyCode.ENTER:\n          {\n            if (!open) {\n              triggerOpen(true);\n            } else if (onSubmit() !== false) {\n              setTyping(true);\n            }\n\n            e.preventDefault();\n            return;\n          }\n\n        case KeyCode.TAB:\n          {\n            if (typing && open && !e.shiftKey) {\n              setTyping(false);\n              e.preventDefault();\n            } else if (!typing && open) {\n              if (!forwardKeyDown(e) && e.shiftKey) {\n                setTyping(true);\n                e.preventDefault();\n              }\n            }\n\n            return;\n          }\n\n        case KeyCode.ESC:\n          {\n            setTyping(true);\n            onCancel();\n            return;\n          }\n      }\n\n      if (!open && ![KeyCode.SHIFT].includes(e.which)) {\n        triggerOpen(true);\n      } else if (!typing) {\n        // Let popup panel handle keyboard\n        forwardKeyDown(e);\n      }\n    },\n    onFocus: function onFocus(e) {\n      setTyping(true);\n      setFocused(true);\n\n      if (_onFocus) {\n        _onFocus(e);\n      }\n    },\n    onBlur: function onBlur(e) {\n      if (preventBlurRef.current || !isClickOutside(document.activeElement)) {\n        preventBlurRef.current = false;\n        return;\n      }\n\n      if (blurToCancel) {\n        setTimeout(function () {\n          if (isClickOutside(document.activeElement)) {\n            onCancel();\n          }\n        }, 0);\n      } else {\n        triggerOpen(false);\n      }\n\n      setFocused(false);\n\n      if (_onBlur) {\n        _onBlur(e);\n      }\n    }\n  }; // Global click handler\n\n  React.useEffect(function () {\n    return addGlobalMouseDownEvent(function (_ref2) {\n      var target = _ref2.target;\n\n      if (open) {\n        if (!isClickOutside(target)) {\n          preventBlurRef.current = true; // Always set back in case `onBlur` prevented by user\n\n          window.setTimeout(function () {\n            preventBlurRef.current = false;\n          }, 0);\n        } else if (!focused) {\n          triggerOpen(false);\n        }\n      }\n    });\n  });\n  return [inputProps, {\n    focused: focused,\n    typing: typing\n  }];\n}"]},"metadata":{},"sourceType":"module"}